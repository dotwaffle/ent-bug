// Code generated by ent, DO NOT EDIT.

package ogent

import "entgo.io/bug/ent"

func NewThingCreate(e *ent.Thing) *ThingCreate {
	if e == nil {
		return nil
	}
	var ret ThingCreate
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewThingCreates(es []*ent.Thing) []ThingCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ThingCreate, len(es))
	for i, e := range es {
		r[i] = NewThingCreate(e).Elem()
	}
	return r
}

func (t *ThingCreate) Elem() ThingCreate {
	if t == nil {
		return ThingCreate{}
	}
	return *t
}

func NewThingHTTPCreate(e *ent.ThingHTTP) *ThingHTTPCreate {
	if e == nil {
		return nil
	}
	var ret ThingHTTPCreate
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewThingHTTPCreates(es []*ent.ThingHTTP) []ThingHTTPCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ThingHTTPCreate, len(es))
	for i, e := range es {
		r[i] = NewThingHTTPCreate(e).Elem()
	}
	return r
}

func (th *ThingHTTPCreate) Elem() ThingHTTPCreate {
	if th == nil {
		return ThingHTTPCreate{}
	}
	return *th
}

func NewThingHTTPList(e *ent.ThingHTTP) *ThingHTTPList {
	if e == nil {
		return nil
	}
	var ret ThingHTTPList
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewThingHTTPLists(es []*ent.ThingHTTP) []ThingHTTPList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ThingHTTPList, len(es))
	for i, e := range es {
		r[i] = NewThingHTTPList(e).Elem()
	}
	return r
}

func (th *ThingHTTPList) Elem() ThingHTTPList {
	if th == nil {
		return ThingHTTPList{}
	}
	return *th
}

func NewThingHTTPRead(e *ent.ThingHTTP) *ThingHTTPRead {
	if e == nil {
		return nil
	}
	var ret ThingHTTPRead
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewThingHTTPReads(es []*ent.ThingHTTP) []ThingHTTPRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ThingHTTPRead, len(es))
	for i, e := range es {
		r[i] = NewThingHTTPRead(e).Elem()
	}
	return r
}

func (th *ThingHTTPRead) Elem() ThingHTTPRead {
	if th == nil {
		return ThingHTTPRead{}
	}
	return *th
}

func NewThingHTTPUpdate(e *ent.ThingHTTP) *ThingHTTPUpdate {
	if e == nil {
		return nil
	}
	var ret ThingHTTPUpdate
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewThingHTTPUpdates(es []*ent.ThingHTTP) []ThingHTTPUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ThingHTTPUpdate, len(es))
	for i, e := range es {
		r[i] = NewThingHTTPUpdate(e).Elem()
	}
	return r
}

func (th *ThingHTTPUpdate) Elem() ThingHTTPUpdate {
	if th == nil {
		return ThingHTTPUpdate{}
	}
	return *th
}

func NewThingHTTPProbesHTTPList(e *ent.Thing) *ThingHTTPProbesHTTPList {
	if e == nil {
		return nil
	}
	var ret ThingHTTPProbesHTTPList
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewThingHTTPProbesHTTPLists(es []*ent.Thing) []ThingHTTPProbesHTTPList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ThingHTTPProbesHTTPList, len(es))
	for i, e := range es {
		r[i] = NewThingHTTPProbesHTTPList(e).Elem()
	}
	return r
}

func (t *ThingHTTPProbesHTTPList) Elem() ThingHTTPProbesHTTPList {
	if t == nil {
		return ThingHTTPProbesHTTPList{}
	}
	return *t
}

func NewThingList(e *ent.Thing) *ThingList {
	if e == nil {
		return nil
	}
	var ret ThingList
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewThingLists(es []*ent.Thing) []ThingList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ThingList, len(es))
	for i, e := range es {
		r[i] = NewThingList(e).Elem()
	}
	return r
}

func (t *ThingList) Elem() ThingList {
	if t == nil {
		return ThingList{}
	}
	return *t
}

func NewThingRead(e *ent.Thing) *ThingRead {
	if e == nil {
		return nil
	}
	var ret ThingRead
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewThingReads(es []*ent.Thing) []ThingRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ThingRead, len(es))
	for i, e := range es {
		r[i] = NewThingRead(e).Elem()
	}
	return r
}

func (t *ThingRead) Elem() ThingRead {
	if t == nil {
		return ThingRead{}
	}
	return *t
}

func NewThingUpdate(e *ent.Thing) *ThingUpdate {
	if e == nil {
		return nil
	}
	var ret ThingUpdate
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewThingUpdates(es []*ent.Thing) []ThingUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ThingUpdate, len(es))
	for i, e := range es {
		r[i] = NewThingUpdate(e).Elem()
	}
	return r
}

func (t *ThingUpdate) Elem() ThingUpdate {
	if t == nil {
		return ThingUpdate{}
	}
	return *t
}

func NewThingProbedByList(e *ent.ThingHTTP) *ThingProbedByList {
	if e == nil {
		return nil
	}
	var ret ThingProbedByList
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewThingProbedByLists(es []*ent.ThingHTTP) []ThingProbedByList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ThingProbedByList, len(es))
	for i, e := range es {
		r[i] = NewThingProbedByList(e).Elem()
	}
	return r
}

func (th *ThingProbedByList) Elem() ThingProbedByList {
	if th == nil {
		return ThingProbedByList{}
	}
	return *th
}
