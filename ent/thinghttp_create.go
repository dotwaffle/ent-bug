// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/thing"
	"entgo.io/bug/ent/thinghttp"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThingHTTPCreate is the builder for creating a ThingHTTP entity.
type ThingHTTPCreate struct {
	config
	mutation *ThingHTTPMutation
	hooks    []Hook
}

// SetAge sets the "age" field.
func (thc *ThingHTTPCreate) SetAge(i int) *ThingHTTPCreate {
	thc.mutation.SetAge(i)
	return thc
}

// SetName sets the "name" field.
func (thc *ThingHTTPCreate) SetName(s string) *ThingHTTPCreate {
	thc.mutation.SetName(s)
	return thc
}

// AddProbesHTTPIDs adds the "probes_http" edge to the Thing entity by IDs.
func (thc *ThingHTTPCreate) AddProbesHTTPIDs(ids ...int) *ThingHTTPCreate {
	thc.mutation.AddProbesHTTPIDs(ids...)
	return thc
}

// AddProbesHTTP adds the "probes_http" edges to the Thing entity.
func (thc *ThingHTTPCreate) AddProbesHTTP(t ...*Thing) *ThingHTTPCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return thc.AddProbesHTTPIDs(ids...)
}

// Mutation returns the ThingHTTPMutation object of the builder.
func (thc *ThingHTTPCreate) Mutation() *ThingHTTPMutation {
	return thc.mutation
}

// Save creates the ThingHTTP in the database.
func (thc *ThingHTTPCreate) Save(ctx context.Context) (*ThingHTTP, error) {
	return withHooks(ctx, thc.sqlSave, thc.mutation, thc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (thc *ThingHTTPCreate) SaveX(ctx context.Context) *ThingHTTP {
	v, err := thc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (thc *ThingHTTPCreate) Exec(ctx context.Context) error {
	_, err := thc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thc *ThingHTTPCreate) ExecX(ctx context.Context) {
	if err := thc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (thc *ThingHTTPCreate) check() error {
	if _, ok := thc.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "ThingHTTP.age"`)}
	}
	if _, ok := thc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ThingHTTP.name"`)}
	}
	return nil
}

func (thc *ThingHTTPCreate) sqlSave(ctx context.Context) (*ThingHTTP, error) {
	if err := thc.check(); err != nil {
		return nil, err
	}
	_node, _spec := thc.createSpec()
	if err := sqlgraph.CreateNode(ctx, thc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	thc.mutation.id = &_node.ID
	thc.mutation.done = true
	return _node, nil
}

func (thc *ThingHTTPCreate) createSpec() (*ThingHTTP, *sqlgraph.CreateSpec) {
	var (
		_node = &ThingHTTP{config: thc.config}
		_spec = sqlgraph.NewCreateSpec(thinghttp.Table, sqlgraph.NewFieldSpec(thinghttp.FieldID, field.TypeInt))
	)
	if value, ok := thc.mutation.Age(); ok {
		_spec.SetField(thinghttp.FieldAge, field.TypeInt, value)
		_node.Age = value
	}
	if value, ok := thc.mutation.Name(); ok {
		_spec.SetField(thinghttp.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := thc.mutation.ProbesHTTPIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   thinghttp.ProbesHTTPTable,
			Columns: thinghttp.ProbesHTTPPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ThingHTTPCreateBulk is the builder for creating many ThingHTTP entities in bulk.
type ThingHTTPCreateBulk struct {
	config
	err      error
	builders []*ThingHTTPCreate
}

// Save creates the ThingHTTP entities in the database.
func (thcb *ThingHTTPCreateBulk) Save(ctx context.Context) ([]*ThingHTTP, error) {
	if thcb.err != nil {
		return nil, thcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(thcb.builders))
	nodes := make([]*ThingHTTP, len(thcb.builders))
	mutators := make([]Mutator, len(thcb.builders))
	for i := range thcb.builders {
		func(i int, root context.Context) {
			builder := thcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ThingHTTPMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, thcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, thcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, thcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (thcb *ThingHTTPCreateBulk) SaveX(ctx context.Context) []*ThingHTTP {
	v, err := thcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (thcb *ThingHTTPCreateBulk) Exec(ctx context.Context) error {
	_, err := thcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thcb *ThingHTTPCreateBulk) ExecX(ctx context.Context) {
	if err := thcb.Exec(ctx); err != nil {
		panic(err)
	}
}
