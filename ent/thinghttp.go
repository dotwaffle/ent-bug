// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/thinghttp"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ThingHTTP is the model entity for the ThingHTTP schema.
type ThingHTTP struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThingHTTPQuery when eager-loading is set.
	Edges        ThingHTTPEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ThingHTTPEdges holds the relations/edges for other nodes in the graph.
type ThingHTTPEdges struct {
	// ProbesHTTP holds the value of the probes_http edge.
	ProbesHTTP []*Thing `json:"probes_http,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProbesHTTPOrErr returns the ProbesHTTP value or an error if the edge
// was not loaded in eager-loading.
func (e ThingHTTPEdges) ProbesHTTPOrErr() ([]*Thing, error) {
	if e.loadedTypes[0] {
		return e.ProbesHTTP, nil
	}
	return nil, &NotLoadedError{edge: "probes_http"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ThingHTTP) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case thinghttp.FieldID, thinghttp.FieldAge:
			values[i] = new(sql.NullInt64)
		case thinghttp.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ThingHTTP fields.
func (th *ThingHTTP) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case thinghttp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			th.ID = int(value.Int64)
		case thinghttp.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				th.Age = int(value.Int64)
			}
		case thinghttp.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				th.Name = value.String
			}
		default:
			th.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ThingHTTP.
// This includes values selected through modifiers, order, etc.
func (th *ThingHTTP) Value(name string) (ent.Value, error) {
	return th.selectValues.Get(name)
}

// QueryProbesHTTP queries the "probes_http" edge of the ThingHTTP entity.
func (th *ThingHTTP) QueryProbesHTTP() *ThingQuery {
	return NewThingHTTPClient(th.config).QueryProbesHTTP(th)
}

// Update returns a builder for updating this ThingHTTP.
// Note that you need to call ThingHTTP.Unwrap() before calling this method if this ThingHTTP
// was returned from a transaction, and the transaction was committed or rolled back.
func (th *ThingHTTP) Update() *ThingHTTPUpdateOne {
	return NewThingHTTPClient(th.config).UpdateOne(th)
}

// Unwrap unwraps the ThingHTTP entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (th *ThingHTTP) Unwrap() *ThingHTTP {
	_tx, ok := th.config.driver.(*txDriver)
	if !ok {
		panic("ent: ThingHTTP is not a transactional entity")
	}
	th.config.driver = _tx.drv
	return th
}

// String implements the fmt.Stringer.
func (th *ThingHTTP) String() string {
	var builder strings.Builder
	builder.WriteString("ThingHTTP(")
	builder.WriteString(fmt.Sprintf("id=%v, ", th.ID))
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", th.Age))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(th.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ThingHTTPs is a parsable slice of ThingHTTP.
type ThingHTTPs []*ThingHTTP
