// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/thing"
	"entgo.io/bug/ent/thinghttp"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThingUpdate is the builder for updating Thing entities.
type ThingUpdate struct {
	config
	hooks    []Hook
	mutation *ThingMutation
}

// Where appends a list predicates to the ThingUpdate builder.
func (tu *ThingUpdate) Where(ps ...predicate.Thing) *ThingUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetAge sets the "age" field.
func (tu *ThingUpdate) SetAge(i int) *ThingUpdate {
	tu.mutation.ResetAge()
	tu.mutation.SetAge(i)
	return tu
}

// AddAge adds i to the "age" field.
func (tu *ThingUpdate) AddAge(i int) *ThingUpdate {
	tu.mutation.AddAge(i)
	return tu
}

// SetName sets the "name" field.
func (tu *ThingUpdate) SetName(s string) *ThingUpdate {
	tu.mutation.SetName(s)
	return tu
}

// AddProbedByIDs adds the "probed_by" edge to the ThingHTTP entity by IDs.
func (tu *ThingUpdate) AddProbedByIDs(ids ...int) *ThingUpdate {
	tu.mutation.AddProbedByIDs(ids...)
	return tu
}

// AddProbedBy adds the "probed_by" edges to the ThingHTTP entity.
func (tu *ThingUpdate) AddProbedBy(t ...*ThingHTTP) *ThingUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddProbedByIDs(ids...)
}

// Mutation returns the ThingMutation object of the builder.
func (tu *ThingUpdate) Mutation() *ThingMutation {
	return tu.mutation
}

// ClearProbedBy clears all "probed_by" edges to the ThingHTTP entity.
func (tu *ThingUpdate) ClearProbedBy() *ThingUpdate {
	tu.mutation.ClearProbedBy()
	return tu
}

// RemoveProbedByIDs removes the "probed_by" edge to ThingHTTP entities by IDs.
func (tu *ThingUpdate) RemoveProbedByIDs(ids ...int) *ThingUpdate {
	tu.mutation.RemoveProbedByIDs(ids...)
	return tu
}

// RemoveProbedBy removes "probed_by" edges to ThingHTTP entities.
func (tu *ThingUpdate) RemoveProbedBy(t ...*ThingHTTP) *ThingUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveProbedByIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *ThingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *ThingUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *ThingUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *ThingUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *ThingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(thing.Table, thing.Columns, sqlgraph.NewFieldSpec(thing.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Age(); ok {
		_spec.SetField(thing.FieldAge, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedAge(); ok {
		_spec.AddField(thing.FieldAge, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(thing.FieldName, field.TypeString, value)
	}
	if tu.mutation.ProbedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   thing.ProbedByTable,
			Columns: thing.ProbedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thinghttp.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedProbedByIDs(); len(nodes) > 0 && !tu.mutation.ProbedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   thing.ProbedByTable,
			Columns: thing.ProbedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thinghttp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProbedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   thing.ProbedByTable,
			Columns: thing.ProbedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thinghttp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{thing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// ThingUpdateOne is the builder for updating a single Thing entity.
type ThingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThingMutation
}

// SetAge sets the "age" field.
func (tuo *ThingUpdateOne) SetAge(i int) *ThingUpdateOne {
	tuo.mutation.ResetAge()
	tuo.mutation.SetAge(i)
	return tuo
}

// AddAge adds i to the "age" field.
func (tuo *ThingUpdateOne) AddAge(i int) *ThingUpdateOne {
	tuo.mutation.AddAge(i)
	return tuo
}

// SetName sets the "name" field.
func (tuo *ThingUpdateOne) SetName(s string) *ThingUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// AddProbedByIDs adds the "probed_by" edge to the ThingHTTP entity by IDs.
func (tuo *ThingUpdateOne) AddProbedByIDs(ids ...int) *ThingUpdateOne {
	tuo.mutation.AddProbedByIDs(ids...)
	return tuo
}

// AddProbedBy adds the "probed_by" edges to the ThingHTTP entity.
func (tuo *ThingUpdateOne) AddProbedBy(t ...*ThingHTTP) *ThingUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddProbedByIDs(ids...)
}

// Mutation returns the ThingMutation object of the builder.
func (tuo *ThingUpdateOne) Mutation() *ThingMutation {
	return tuo.mutation
}

// ClearProbedBy clears all "probed_by" edges to the ThingHTTP entity.
func (tuo *ThingUpdateOne) ClearProbedBy() *ThingUpdateOne {
	tuo.mutation.ClearProbedBy()
	return tuo
}

// RemoveProbedByIDs removes the "probed_by" edge to ThingHTTP entities by IDs.
func (tuo *ThingUpdateOne) RemoveProbedByIDs(ids ...int) *ThingUpdateOne {
	tuo.mutation.RemoveProbedByIDs(ids...)
	return tuo
}

// RemoveProbedBy removes "probed_by" edges to ThingHTTP entities.
func (tuo *ThingUpdateOne) RemoveProbedBy(t ...*ThingHTTP) *ThingUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveProbedByIDs(ids...)
}

// Where appends a list predicates to the ThingUpdate builder.
func (tuo *ThingUpdateOne) Where(ps ...predicate.Thing) *ThingUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *ThingUpdateOne) Select(field string, fields ...string) *ThingUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Thing entity.
func (tuo *ThingUpdateOne) Save(ctx context.Context) (*Thing, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *ThingUpdateOne) SaveX(ctx context.Context) *Thing {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *ThingUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *ThingUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *ThingUpdateOne) sqlSave(ctx context.Context) (_node *Thing, err error) {
	_spec := sqlgraph.NewUpdateSpec(thing.Table, thing.Columns, sqlgraph.NewFieldSpec(thing.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Thing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, thing.FieldID)
		for _, f := range fields {
			if !thing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != thing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Age(); ok {
		_spec.SetField(thing.FieldAge, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedAge(); ok {
		_spec.AddField(thing.FieldAge, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(thing.FieldName, field.TypeString, value)
	}
	if tuo.mutation.ProbedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   thing.ProbedByTable,
			Columns: thing.ProbedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thinghttp.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedProbedByIDs(); len(nodes) > 0 && !tuo.mutation.ProbedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   thing.ProbedByTable,
			Columns: thing.ProbedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thinghttp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProbedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   thing.ProbedByTable,
			Columns: thing.ProbedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thinghttp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Thing{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{thing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
