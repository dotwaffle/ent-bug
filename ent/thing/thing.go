// Code generated by ent, DO NOT EDIT.

package thing

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the thing type in the database.
	Label = "thing"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeProbedBy holds the string denoting the probed_by edge name in mutations.
	EdgeProbedBy = "probed_by"
	// Table holds the table name of the thing in the database.
	Table = "things"
	// ProbedByTable is the table that holds the probed_by relation/edge. The primary key declared below.
	ProbedByTable = "thing_http_probes_http"
	// ProbedByInverseTable is the table name for the ThingHTTP entity.
	// It exists in this package in order to avoid circular dependency with the "thinghttp" package.
	ProbedByInverseTable = "thing_htt_ps"
)

// Columns holds all SQL columns for thing fields.
var Columns = []string{
	FieldID,
	FieldAge,
	FieldName,
}

var (
	// ProbedByPrimaryKey and ProbedByColumn2 are the table columns denoting the
	// primary key for the probed_by relation (M2M).
	ProbedByPrimaryKey = []string{"thing_http_id", "thing_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Thing queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAge orders the results by the age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByProbedByCount orders the results by probed_by count.
func ByProbedByCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProbedByStep(), opts...)
	}
}

// ByProbedBy orders the results by probed_by terms.
func ByProbedBy(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProbedByStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProbedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProbedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProbedByTable, ProbedByPrimaryKey...),
	)
}
